generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           Int               @id @default(autoincrement())
  email        String            @unique
  name         String?
  picture      String?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  verification UserVerification?
  ownedBills   Bill[]            @relation("Owner")
  memberships  BillMember[]
  invitations  Invitation[]
  payments     Payment[]
}

model UserVerification {
  id           Int      @id @default(autoincrement())
  userId       Int      @unique
  googleId     String   @unique
  accessToken  String   @unique
  refreshToken String
  idToken      String
  expiresIn    Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model Bill {
  id          Int          @id @default(autoincrement())
  title       String
  slug        String       @unique
  description String?
  totalAmount Int
  status      BillStatus   @default(OPEN)
  paystackRef String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  ownerId     Int
  owner       User         @relation("Owner", fields: [ownerId], references: [id])
  members     BillMember[]
  invitations Invitation[]
  payments    Payment[]
}

model BillMember {
  id       Int        @id @default(autoincrement())
  userId   Int
  billId   Int
  role     MemberRole @default(MEMBER)
  joinedAt DateTime   @default(now())
  user     User       @relation(fields: [userId], references: [id])
  bill     Bill       @relation(fields: [billId], references: [id])

  @@unique([userId, billId])
}

model Invitation {
  id          Int              @id @default(autoincrement())
  email       String
  billId      Int
  status      InvitationStatus @default(PENDING)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  bill        Bill             @relation(fields: [billId], references: [id])
  invitedUser User?            @relation(fields: [email], references: [email])

  @@unique([email, billId])
}

model Payment {
  id          Int           @id @default(autoincrement())
  amount      Int
  status      PaymentStatus @default(PENDING)
  paystackRef String        @unique
  userId      Int
  billId      Int
  user        User          @relation(fields: [userId], references: [id])
  bill        Bill          @relation(fields: [billId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

enum BillStatus {
  OPEN
  CLOSED
  SETTLED
}

enum PaymentStatus {
  PENDING
  SUCCESSFUL
  FAILED
}

enum MemberRole {
  OWNER
  MEMBER
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
}
